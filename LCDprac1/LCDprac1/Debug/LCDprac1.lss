
LCDprac1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000024d  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000145  00000000  00000000  00000521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d1  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000219  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000022  00000000  00000000  00000ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d0       	rcall	.+180    	; 0x178 <main>
  c4:	63 c0       	rjmp	.+198    	; 0x18c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z8__init__v>:



void __init__()
{
	DDRB = 0xff;//
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;//
  cc:	88 bb       	out	0x18, r24	; 24
	
	DDRD = 0xfe;
  ce:	8e ef       	ldi	r24, 0xFE	; 254
  d0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xfe;
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	08 95       	ret

000000d6 <_Z15changeDriectionv>:



void changeDriection(){
	byte sw;
	sw = PIND & 0x01;
  d6:	80 b3       	in	r24, 0x10	; 16
  d8:	81 70       	andi	r24, 0x01	; 1
	if(sw == btn_state){
  da:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
  de:	89 13       	cpse	r24, r25
  e0:	06 c0       	rjmp	.+12     	; 0xee <_Z15changeDriectionv+0x18>
		flag = !flag;
  e2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 27       	eor	r24, r25
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  ee:	08 95       	ret

000000f0 <_Z4rtolv>:

	
}

void rtol(){
	PORTB = led;
  f0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
  f4:	88 bb       	out	0x18, r24	; 24
	led = ((led<<1) | 0x01); //1111 1110
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
  fa:	88 0f       	add	r24, r24
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	8f e7       	ldi	r24, 0x7F	; 127
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <_Z4rtolv+0x18>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z4rtolv+0x22>
 112:	00 00       	nop

	_delay_ms(100);

	if(led == 0x7f){
 114:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
 118:	8f 37       	cpi	r24, 0x7F	; 127
 11a:	19 f4       	brne	.+6      	; 0x122 <_Z4rtolv+0x32>
		flag = false;
 11c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 120:	08 95       	ret

	}
	if(led == 0xff)
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	29 f4       	brne	.+10     	; 0x130 <_Z4rtolv+0x40>
	{
		led = 0x7f;
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
		flag = false;
 12c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 130:	08 95       	ret

00000132 <_Z4ltorv>:
	}

}

void ltor(){
	PORTB = led;
 132:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
 136:	88 bb       	out	0x18, r24	; 24
	led = ((led>>1) | 0x80);
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
 13c:	86 95       	lsr	r24
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	8f e7       	ldi	r24, 0x7F	; 127
 148:	94 e0       	ldi	r25, 0x04	; 4
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <_Z4ltorv+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z4ltorv+0x22>
 154:	00 00       	nop

	_delay_ms(100);

	if(led == 0xfe){
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <led>
 15a:	8e 3f       	cpi	r24, 0xFE	; 254
 15c:	21 f4       	brne	.+8      	; 0x166 <_Z4ltorv+0x34>
		flag = true;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 164:	08 95       	ret
	}

	if(led == 0xff)
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	31 f4       	brne	.+12     	; 0x176 <_Z4ltorv+0x44>
	{
		led = 0xfe;
 16a:	8e ef       	ldi	r24, 0xFE	; 254
 16c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <led>
		flag = true;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 176:	08 95       	ret

00000178 <main>:
void rtol();
void ltor();

int main(void)
{
	__init__();
 178:	a7 df       	rcall	.-178    	; 0xc8 <_Z8__init__v>
	
	
	while(1)
	{
	changeDriection();
 17a:	ad df       	rcall	.-166    	; 0xd6 <_Z15changeDriectionv>
	

		if(flag == true){
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 180:	88 23       	and	r24, r24
 182:	11 f0       	breq	.+4      	; 0x188 <main+0x10>
		rtol();
 184:	b5 df       	rcall	.-150    	; 0xf0 <_Z4rtolv>
 186:	f9 cf       	rjmp	.-14     	; 0x17a <main+0x2>
		}
		else if(flag ==false){
		ltor();
 188:	d4 df       	rcall	.-88     	; 0x132 <_Z4ltorv>
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <main+0x2>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
